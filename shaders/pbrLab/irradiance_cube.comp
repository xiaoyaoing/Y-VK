#version 450
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_debug_printf : enable
layout (binding = 0, set = 1) uniform samplerCube sampler_env;
layout(binding = 0, set = 2, rgba8) uniform writeonly imageCube irradiance_map;
layout(push_constant) uniform PushConstant {
    float delta_phi;
    float delta_theta;
    uint mip_level;
    uint padding;
    ivec2 size;
};

#define PI 3.14159265359

layout(local_size_x = 8, local_size_y = 8, local_size_z = 6) in;
void main(){
    uvec3 storePos = gl_GlobalInvocationID.xyz;
    if (storePos.x >= size.x || storePos.y >= size.y || storePos.z >= 6)
    return;
    uint face = storePos.z;
    vec2 normal2d = vec2(storePos.x / float(size.x), storePos.y / float(size.y));
    normal2d = normal2d * 2.0 - 1.0;
    vec3 N;

    if (face == 0) N = vec3(1.0, normal2d.x, normal2d.y);
    if (face == 1) N = vec3(-1.0, normal2d.x, normal2d.y);
    if (face == 2) N = vec3(normal2d.x, 1.0, normal2d.y);
    if (face == 3) N = vec3(normal2d.x, -1.0, normal2d.y);
    if (face == 4) N = vec3(normal2d.x, normal2d.y, 1.0);
    if (face == 5) N = vec3(normal2d.x, normal2d.y, -1.0);

    N = normalize(N);

    const float TWO_PI = PI * 2.0;
    const float HALF_PI = PI * 0.5;

    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, N));
    up = cross(N, right);

    vec3 color = vec3(0.0);
    uint sampleCount = 0u;
    for (float phi = 0.0; phi < TWO_PI; phi += delta_phi) {
        for (float theta = 0.0; theta < HALF_PI; theta += delta_theta) {
            vec3 amz_vec = cos(phi) * right + sin(phi) * up;
            vec3 sample_vector = cos(theta) * N + sin(theta) * amz_vec;
            //  color += textureLod(sampler_env, sample_vector, float(mip_level)).rgb * cos(theta) * sin(theta);
            color += texture(sampler_env, sample_vector).rgb * cos(theta) * sin(theta);
            //   if (theta!=0)
            //   debugPrintfEXT("sample_vector: %f %f %f color: %f %f %f cos %f sin %f\n", sample_vector.x, sample_vector.y, sample_vector.z, color.x, color.y, color.z, cos(theta), sin(theta));
            sampleCount++;
        }
    }
    imageStore(irradiance_map, ivec3(storePos), vec4(color * PI / float(sampleCount), 1.0));

}