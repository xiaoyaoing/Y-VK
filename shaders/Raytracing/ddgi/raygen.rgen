#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require



#include "ddgi_commons.h"
#include "../common.glsl"
#include  "../bsdf.glsl"

layout(location = 0) rayPayloadEXT HitPayload hitPayload;
layout(location = 1) rayPayloadEXT AnyHitPayload any_hit_payload;
layout(push_constant) uniform _PushConstantRay { PCPath pc_ray; };
layout(set = 0, binding = 0) uniform _DDGIUboBuffer{ DDGIUbo ddgi_ubo; };
layout(set = 0, binding = 6, std430)  buffer DDGIRayDataBuffer { DDGIRayData data[]; } ddgi_ray_data_buffer;
layout(set = 0, binding = 7)  buffer ProbeOffsets { vec3 d[]; } probe_offsets;



#include "../trace_common.glsl"
#include  "ddgi_sample.glsl"

uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc_ray.frame_num);
//layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer DDGIRayDataBuffer { DDGIRayData data[];};


//DDGIRayDataBuffer ddgi_ray_data_buffer = DDGIRayDataBuffer(scene_desc.ddgi_ray_data_addr);


vec3 probe_location(int index) {
    vec3 offset = probe_offsets.d[index].xyz;
    offset = vec3(0);
    return offset + get_position_by_grid(get_probe_coord_by_index(index));
}

vec3 spherical_fibonacci(float i, float n) {
    const float PHI = sqrt(5.0) * 0.5 + 0.5;
    #define madfrac(A, B) ((A) * (B)-floor((A) * (B)))
    float phi = PI2 * madfrac(i, PHI - 1);
    float cos_theta = 1.0 - (2.0 * i + 1.0) * (1.0 / n);
    float sin_theta = sqrt(clamp(1.0 - cos_theta * cos_theta, 0.0f, 1.0f));
    return vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);
    #undef madfrac
}


vec3 Le(vec3 dir_to_light, SurfaceScatterEvent event){
    uint light_idx = prim_infos.p[event.prim_idx].light_index;
    if (light_idx == -1 || light_idx>pc_ray.light_num-1){
        return vec3(0);
    }
    return eval_light(lights[light_idx], event.p, event.frame.n, dir_to_light);
}

vec3 eval_env(vec3 dir){
    dir = normalize(dir);
    if (scene_desc.envmap_idx == -1){
        return vec3(0);
    }
    mat4  m = transpose(lights[scene_desc.envmap_idx].world_matrix);
    vec2 dir_uv = envdir_to_uv(m, dir);
    return texture(scene_textures[lights[scene_desc.envmap_idx].light_texture_id], dir_uv).xyz;
}

void main()
{


    int probe_index = int(gl_LaunchIDEXT.x);
    int ray_index = int(gl_LaunchIDEXT.y);


    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;

    vec3 direction = normalize(mat3(pc_ray.probe_rotation) *  spherical_fibonacci(ray_index, ddgi_ubo.rays_per_probe));
    vec3 origin = probe_location(probe_index);
    vec3 irradiance = vec3(0);
    float distance;


    SurfaceScatterEvent event;
    {
        hitPayload = init_hit_payload();

        traceRayEXT(tlas, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

        bool found_intersect = found_intersection(hitPayload);
        if (!found_intersect) {
            irradiance =  eval_env(direction.xyz);
            distance = 1000.f;
        }
        else {
            event = make_surface_scatter_event(hitPayload, -direction.xyz);
            irradiance += Le(direction.xyz, event);

            vec3 light_sample = uniform_sample_one_light(seed, event, pc_ray.light_num, pc_ray.enable_sample_light>0, pc_ray.enable_sample_bsdf>0);
           // light_sample = get_albedo(materials.m[event.material_idx],event.uv);
            irradiance +=  light_sample;
            
            distance = length(hitPayload.p - origin);
        }   
    }
    if (isnan(irradiance.x) || isnan(irradiance.y) || isnan(irradiance.z)){
        debugPrintfEXT("nan irradiance %f %f %f\n", irradiance.x, irradiance.y, irradiance.z);
    }
    
//    if(!isBlack(irradiance))
//        debugPrintfEXT("irradiance %f %f %f\n", irradiance.x, irradiance.y, irradiance.z);
    
    DDGIRayData ray_data;
    ray_data.irradiance = irradiance;
    ray_data.dist = distance;
    ray_data.direction = direction;
    uint index = probe_index * ddgi_ubo.rays_per_probe + ray_index;

    ddgi_ray_data_buffer.data[index] = ray_data;
    return;


}
