#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#include "ddgi_commons.h"



layout(set = 0, binding = 6) readonly buffer DDGIRayDataBuffer { DDGIRayData data[]; } ddgi_ray_data_buffer;
//layout(set = 1, binding = 0) uniform sampler2D prev_output_image;
#ifdef UPDATE_RADIANCE
layout(set = 2, binding = 0, rgba16f)  uniform image2D output_image;
#else
layout(set = 2, binding = 0, rg16f)  uniform image2D output_image;
#endif
layout(push_constant) uniform _PushConstantRay { PCPath pc_ray; };
layout(set = 0, binding = 0) uniform _DDGIUboBuffer{ DDGIUbo ddgi_ubo; };

#include "ddgi_sample.glsl"



#ifdef UPDATE_RADIANCE
#define NUM_THREADS_X PROBE_RADIANCE_WITH_BORDER_SIDE
#define NUM_THREADS_Y PROBE_RADIANCE_WITH_BORDER_SIDE
#define OUTPUT_BORDER_SIDE PROBE_RADIANCE_WITH_BORDER_SIDE
#define OUTPUT_SIDE PROBE_RADIANCE_SIDE
//#define PROBE_SIDE_LENGTH 6
//#define PROBE_WITH_BORDER_SIDE 8
#else
#define NUM_THREADS_X PROBE_DEPTH_WITH_BORDER_SIDE
#define NUM_THREADS_Y PROBE_DEPTH_WITH_BORDER_SIDE
#define OUTPUT_BORDER_SIDE PROBE_DEPTH_WITH_BORDER_SIDE
#define OUTPUT_SIDE PROBE_DEPTH_SIDE
//#define PROBE_SIDE_LENGTH 14
//#define PROBE_WITH_BORDER_SIDE 16
#endif


#define CACHE_SIZE 32

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y,
local_size_z = 1) in;
shared DDGIRayData ray_radiance[CACHE_SIZE];

void updateBorderTexel(ivec2 pixel_coord_top_left, ivec2 pixel_coord_local){
    ivec2 copy_pixel_coord;
    bool is_corner_pixel = (gl_LocalInvocationID.x == 0 || gl_LocalInvocationID.x == OUTPUT_BORDER_SIDE-1) && (gl_LocalInvocationID.y == 0 || gl_LocalInvocationID.y == OUTPUT_BORDER_SIDE-1);
    bool is_row_pixel = (gl_LocalInvocationID.y == 0 || gl_LocalInvocationID.y == OUTPUT_BORDER_SIDE-1);
    if (is_corner_pixel){
        copy_pixel_coord.x = gl_LocalInvocationID.x > 0 ? 1 : OUTPUT_SIDE;
        copy_pixel_coord.y = gl_LocalInvocationID.y > 0 ? 1 : OUTPUT_SIDE;
    }
    else if (is_row_pixel){
        copy_pixel_coord.x = OUTPUT_BORDER_SIDE - 1 - int(gl_LocalInvocationID.x);
        copy_pixel_coord.y = int(gl_LocalInvocationID.y) + (gl_LocalInvocationID.y > 0 ? -1 : 1);
    }
    else {
        copy_pixel_coord.x = int(gl_LocalInvocationID.x) + (gl_LocalInvocationID.x > 0 ? -1 : 1);
        copy_pixel_coord.y = OUTPUT_BORDER_SIDE - 1 - int(gl_LocalInvocationID.y);
    }

    bool isCopyPixelBorder = (copy_pixel_coord.x == 0 || copy_pixel_coord.x == OUTPUT_BORDER_SIDE-1) || (copy_pixel_coord.y == 0 || copy_pixel_coord.y == OUTPUT_BORDER_SIDE-1);

    if (isCopyPixelBorder){
        debugPrintfEXT("copy_pixel_coord: %d %d\n", copy_pixel_coord.x, copy_pixel_coord.y);
    }
    vec4 result = imageLoad(output_image, pixel_coord_top_left + copy_pixel_coord);
    imageStore(output_image, pixel_coord_top_left + pixel_coord_local, result);
}


const float tmax = 10000.0;
void main(){


    const int probe_idx = int(gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x);

    uint num_probes = ddgi_ubo.probe_counts.x * ddgi_ubo.probe_counts.y * ddgi_ubo.probe_counts.z;
    if (probe_idx >= num_probes){
        return;
    }

    bool is_border_pixel = (gl_LocalInvocationID.x == 0 || gl_LocalInvocationID.x == OUTPUT_BORDER_SIDE-1) || (gl_LocalInvocationID.y == 0 || gl_LocalInvocationID.y == OUTPUT_BORDER_SIDE-1);

    const ivec3 probe_coord = get_probe_coord_by_index(probe_idx);

    const ivec2 pixel_coord_top_left = get_pixel_coord_top_left(probe_coord, OUTPUT_BORDER_SIDE);

    const ivec2 pixel_coord_local = ivec2(gl_LocalInvocationID.xy);

    const ivec2 pixel_current = pixel_coord_top_left + pixel_coord_local;
    if (!is_border_pixel)
    {
        vec3 texel_dir = oct_decode(normalized_oct_coord(pixel_coord_local- ivec2(1, 1), OUTPUT_SIDE));
        if (texel_dir.y > 0){
            //  texel_dir.x = -texel_dir.x;
        }
        // debugPrintfEXT("texel_dir: %f %f %f\n",texel_dir.x,texel_dir.y,texel_dir.z);

        const ivec2 test_coord = pixel_coord_local - 1;
        vec2 res = encode_to_oct(vec3(0, 0, 1));
        res = res * 0.5  * float(OUTPUT_SIDE) + 0.5f * float(OUTPUT_SIDE);



        float total_weight = 0.0;
        vec3 result = vec3(0.0);
        uint offset = 0;
        uint remaining_rays = ddgi_ubo.rays_per_probe;

        while (remaining_rays > 0){
            uint num_rays = min(remaining_rays, CACHE_SIZE);
            if (gl_LocalInvocationIndex < num_rays){
                uint index = gl_LocalInvocationIndex + probe_idx * ddgi_ubo.rays_per_probe + offset;
                ray_radiance[gl_LocalInvocationIndex] = ddgi_ray_data_buffer.data[index];
            }
            barrier();


            for (uint i = 0; i < num_rays; i++){
                uint index = i + probe_idx * ddgi_ubo.rays_per_probe + offset;
                const vec3 dir = ddgi_ray_data_buffer.data[index].direction;
                float dist = ddgi_ray_data_buffer.data[index].dist;
                float weight = clamp(dot(texel_dir, dir), 0.0, 1.0);
                //                weight = 1.f;

                #ifndef UPDATE_RADIANCE
                weight = pow(weight, ddgi_ubo.depth_sharpness);
                #endif

                if (weight >= 1e-5f)
                {
                    total_weight += weight;

                    #ifdef UPDATE_RADIANCE
                    vec3 irradiance = ddgi_ray_data_buffer.data[index].irradiance;
                    result += irradiance * weight;
                    #else
                    dist = min(abs(dist), ddgi_ubo.max_distance);
                    result.rg  += vec2(dist, dist * dist) * weight;
                   // debugPrintfEXT("pixel_current: %d %d\n",pixel_current.x,pixel_current.y);
                    #endif
                }
            }

            remaining_rays -= num_rays;
            offset += num_rays;

            barrier();
        }

        if (total_weight>0.0)
        result /= total_weight;
        if (pc_ray.first_frame == 0 || pc_ray.frame_num > 0)
        {
            float hysteresis = pc_ray.ddgi_hysteresis;
            vec3 prev_result = imageLoad(output_image, ivec2(pixel_current)).rgb;
            float w = 1. / float(pc_ray.frame_num + 1);
            #ifdef UPDATE_RADIANCE
            const float c_threshold = 1.0 / 1024.0;
            vec3 delta = result.rgb - prev_result;
            delta *= 0.25f;
            vec3 lerpDelta = (1.0 - hysteresis) * delta;

            if (max(max(result.r, result.g), result.b) < max(max(prev_result.r, prev_result.g), prev_result.b)) {
                // lerpDelta = min(max(c_threshold, abs(lerpDelta)), abs(delta)) * sign(lerpDelta);
                lerpDelta.x = min(max(c_threshold, abs(lerpDelta.x)), abs(delta.x)) * sign(lerpDelta.x);
                lerpDelta.y = min(max(c_threshold, abs(lerpDelta.y)), abs(delta.y)) * sign(lerpDelta.y);
                lerpDelta.z = min(max(c_threshold, abs(lerpDelta.z)), abs(delta.z)) * sign(lerpDelta.z);
            }
              result = prev_result + lerpDelta;
          //  result = mix(result, prev_result, hysteresis);

            #else
            result = mix(result, prev_result, hysteresis);
            //            result = mix(prev_result, result, w);
            #endif
        }
        imageStore(output_image, ivec2(pixel_current), vec4(result, 1.0));


    }

    else {
        imageStore(output_image, ivec2(pixel_current), vec4(0, 0, 0, 1));
    }


    if (is_border_pixel){
        updateBorderTexel(pixel_coord_top_left, pixel_coord_local);
    }
}