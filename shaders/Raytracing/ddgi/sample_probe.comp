#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#extension GL_EXT_ray_tracing : require

#include "ddgi_commons.h"
#include "../common.glsl"
#include  "../bsdf.glsl"

#define NUM_THREADS_X 16
#define NUM_THREADS_Y 16
//#define PROBE_SIDE_LENGTH 16
//#define PROBE_WITH_BORDER_SIDE 18

layout(set = 1, binding = 0) uniform sampler2D radiance_map;
layout(set = 1, binding = 1) uniform sampler2D dist_map;
layout(set = 2, binding = 0, rgba32f) uniform image2D radiance_image;
layout(set = 0, binding = 0) uniform _DDGIUboBuffer{ DDGIUbo ddgi_ubo; };
layout(set = 0, binding = 1) buffer ProbeOffsetBuffer { vec3 probe_offsets[]; } ddgi_probe_offset_buffer;
//layout(set = 0, binding = 3) uniform SceneDescBuffer { SceneDesc scene_desc; };
layout(push_constant) uniform _PushConstantRay { PCPath pc_ray; };


layout(buffer_reference, std430, buffer_reference_align = 4) readonly buffer GBuffer_{ GBuffer d[]; };
GBuffer_ gbuffer = GBuffer_(scene_desc.gbuffer_addr);

#include "ddgi_sample.glsl"

vec3 get_probe_offset(uint probe_idx){

    return ddgi_probe_offset_buffer.probe_offsets[probe_idx];
}

vec3 get_probe_position(ivec3 probe_coord){
    float  probe_grid_size = ddgi_ubo.probe_distance;
    vec3 probe_grid_origin = ddgi_ubo.probe_start_position;
    return probe_grid_origin + vec3(probe_coord) * probe_grid_size + get_probe_offset(get_probe_index_by_coord(probe_coord));
}


vec3 sample_irradiance_map(vec3 normal, vec3 position, vec3 surface_bias) {


    vec3 irradiance = vec3(0.0);
    float total_weight = 0.0;

    ivec3 base_probe_coord= get_probe_coord_by_position(position);
    vec3 base_probe_position = get_probe_position(base_probe_coord);
    vec3 biased_position = position + surface_bias;

    vec3 probe_blend_alpha = clamp((biased_position - base_probe_position) / (ddgi_ubo.probe_distance), vec3(0.0), vec3(1.0));


    for (int probe_index = 0;probe_index<8;probe_index ++){
        ivec3 adjacent_probe_offset = ivec3(probe_index, probe_index >> 1, probe_index >> 2) & ivec3(1, 1, 1);


        ivec3 adjacent_probe_coord = clamp(ivec3(base_probe_coord) + adjacent_probe_offset, ivec3(0), ivec3(ddgi_ubo.probe_counts) - ivec3(1));

        int adjacent_probe_index = get_probe_index_by_coord(adjacent_probe_coord);

        int probeState = get_probe_state(adjacent_probe_index);
        if (probeState == 0){
            continue;
        }
        vec3 adjacent_probe_position = get_probe_position(adjacent_probe_coord);
        vec3 dir_world_pos_to_adjacent_probe = normalize(adjacent_probe_position - position);
        vec3 dir_biased_pos_to_adjacent_probe = normalize(adjacent_probe_position - biased_position);


        float biased_pos_to_adjacent_probe_distance = length(adjacent_probe_position - biased_position);

        vec3 trilinear= mix(vec3(1-probe_blend_alpha), probe_blend_alpha, vec3(adjacent_probe_offset));
        trilinear = max(trilinear, vec3(0.001f));
        float trilinear_weight = trilinear.y;// * trilinear.y ;//* trilinear.z;
//        trilinear_weight = trilinear_weight * trilinear_weight;
        float weight = 1.f;


        float wrapShading = (dot(dir_world_pos_to_adjacent_probe, normal) + 1.f) * 0.5f;
       // weight *= (wrapShading * wrapShading) + 0.2f;

        //        vec2 octant_coord = encode_to_oct(dir_biased_pos_to_adjacent_probe);
        vec2 probe_sample_uv = get_probe_color_uv(ivec3(adjacent_probe_coord), -dir_biased_pos_to_adjacent_probe, PROBE_DEPTH_SIDE);

        vec2 filtered_distance = textureLod(dist_map, probe_sample_uv, 0).rg;
        float variance = abs(filtered_distance.x * filtered_distance.x - filtered_distance.y);

        float chebyshev_weight = 1.0f;
        if (biased_pos_to_adjacent_probe_distance > filtered_distance.x){
            float v = biased_pos_to_adjacent_probe_distance - filtered_distance.x;
            chebyshev_weight = variance / (variance + v * v);
            chebyshev_weight = max(pow(chebyshev_weight, 3), 0.f);
        }
        weight *= max(0.05f, chebyshev_weight);
        weight = max(1e-5f, weight);

        const float crush_threshold = 0.2f;
        if (weight < crush_threshold){
            weight *= (weight * weight) / (crush_threshold * crush_threshold);
        }

//        weight = trilinear_weight;
////        weight = 0.125f;
//        probe_sample_uv = get_probe_color_uv(ivec3(adjacent_probe_coord), normal, PROBE_RADIANCE_SIDE);
//        
//        uint tex_width = ddgi_ubo.irradiance_width;
//        uint tex_height = ddgi_ubo.irradiance_height;
//        
//        vec3 probeRadiance = texture(radiance_map, probe_sample_uv).rgb;

        uint tex_width = ddgi_ubo.irradiance_width;
        uint tex_height = ddgi_ubo.irradiance_height;

        vec2 texel_size = vec2(1.0 / tex_width, 1.0 / tex_height);
        vec2 uv00 = vec2(int(probe_sample_uv.x * tex_width) * texel_size.x, int(probe_sample_uv.y * tex_height) * texel_size.y);
        vec2 uv10 = uv00 + vec2(texel_size.x, 0);
        vec2 uv01 = uv00 + vec2(0, texel_size.y);
        vec2 uv11 = uv00 + texel_size;

        vec3 color00 = texture(radiance_map, uv00).rgb;
        vec3 color10 = texture(radiance_map, uv10).rgb;
        vec3 color01 = texture(radiance_map, uv01).rgb;
        vec3 color11 = texture(radiance_map, uv11).rgb;

        vec2 f = fract(probe_sample_uv * vec2(tex_width, tex_height));
        vec3 probeRadiance = mix(mix(color00, color10, f.x), mix(color01, color11, f.x), f.y);
//        probeRadiance = vec3(get_probe_color_uv(ivec3(adjacent_probe_coord), -dir_biased_pos_to_adjacent_probe, PROBE_DEPTH_SIDE), 0);
       // probeRadiance = vec3(encode_to_oct(normal), 0);
        //return probeRadiance;
      //  irradiance = vec3(probe_sample_uv,0);
        irradiance += probeRadiance * weight;//* 10;
        total_weight += weight;
    }

    if (total_weight > 0.0){
        irradiance /= total_weight;
    }
    else {
        irradiance = vec3(0.0);
    }
    
    return irradiance * 3.1415926 * 0.85f;;
}


layout(local_size_x = 16, local_size_y = 16,
local_size_z = 1) in;

const float tmax = 10000.0;
void main(){
    const ivec2 pixel_index  = ivec2(gl_GlobalInvocationID.xy);

    if (pixel_index.x >= pc_ray.size_x || pixel_index.y >= pc_ray.size_y){
        return;
    }
    const uint g_buffer_index = pixel_index.y * pc_ray.size_x + pixel_index.x;
    if (gbuffer.d[g_buffer_index].material_idx == -1){
        return;
    }
    vec3 normal = gbuffer.d[g_buffer_index].normal;
    vec3 position = gbuffer.d[g_buffer_index].position;

    vec3 camera_position = (scene_ubo.viewInverse * vec4(0, 0, 0, 1)).xyz;
    vec3 camera_dir = normalize(position - camera_position);
    vec3 indirect_lighting = sample_irradiance_map(normal, position, get_surface_bias(normal, camera_dir, pc_ray.ddgi_normal_bias, pc_ray.ddgi_view_bias)) * pc_ray.ddgi_indirect_scale;

    vec3 direct_lighting = imageLoad(radiance_image, ivec2(pixel_index)).xyz;
    //    direct_lighting = normal;

    vec3 result = indirect_lighting * get_albedo(materials.m[gbuffer.d[g_buffer_index].material_idx], gbuffer.d[g_buffer_index].uv);
    if (pc_ray.ddgi_show_direct > 0){
        result += direct_lighting;
    }
    imageStore(radiance_image, pixel_index, vec4(result, 1));
}