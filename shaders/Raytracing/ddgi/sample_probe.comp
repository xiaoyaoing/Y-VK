#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "ddgi_commons.h"

layout(binding = 2, set = 0) uniform SceneUboBuffer { SceneUbo scene_ubo; };
layout(binding = 3, set = 0) uniform SceneDescBuffer { SceneDesc scene_desc; };
layout(binding = 6, set = 1) uniform sampler2D scene_textures[1024];

layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer Materials { RTMaterial m[]; };
Materials materials = Materials(scene_desc.material_addr);


#include  "../bsdf.glsl"

#define NUM_THREADS_X 16
#define NUM_THREADS_Y 16
//#define PROBE_SIDE_LENGTH 16
//#define PROBE_WITH_BORDER_SIDE 18

layout(set = 1, binding = 0) uniform sampler2D radiance_map;
layout(set = 1, binding = 1) uniform sampler2D dist_map;
layout(set = 2, binding = 0, rgba32f) uniform image2D radiance_image;
layout(set = 0, binding = 0) uniform _DDGIUboBuffer{ DDGIUbo ddgi_ubo; };
layout(set = 0, binding = 1) buffer ProbeOffsetBuffer { vec3 probe_offsets[]; } ddgi_probe_offset_buffer;
layout(set = 0, binding = 6) readonly buffer DDGIRayDataBuffer { DDGIRayData data[]; } ddgi_ray_data_buffer;

//layout(set = 0, binding = 3) uniform SceneDescBuffer { SceneDesc scene_desc; };
layout(push_constant) uniform _PushConstantRay { PCPath pc_ray; };


layout(buffer_reference, std430, buffer_reference_align = 4) readonly buffer GBuffer_{ GBuffer d[]; };
GBuffer_ gbuffer = GBuffer_(scene_desc.gbuffer_addr);

#include "ddgi_sample.glsl"


#include "sample_probe.glsl"


layout(local_size_x = 16, local_size_y = 16,
local_size_z = 1) in;

const float tmax = 10000.0;
void main(){
    const ivec2 pixel_index  = ivec2(gl_GlobalInvocationID.xy);

    if (pixel_index.x >= pc_ray.size_x || pixel_index.y >= pc_ray.size_y){
        return;
    }
    const uint g_buffer_index = pixel_index.y * pc_ray.size_x + pixel_index.x;
    if (gbuffer.d[g_buffer_index].material_idx == -1){
        return;
    }
    vec3 normal = gbuffer.d[g_buffer_index].normal;
    vec3 position = gbuffer.d[g_buffer_index].position;

    vec3 camera_position = (scene_ubo.viewInverse * vec4(0, 0, 0, 1)).xyz;
    vec3 camera_dir = normalize(position - camera_position);

    const vec3 bias_vec = (normal * 0.2 - camera_dir * 0.8) * (0.75 * ddgi_ubo.probe_distance) * pc_ray.ddgi_normal_bias;
    
    vec3 indirect_lighting = sample_irradiance_map(normal, position, get_surface_bias(normal, camera_dir, pc_ray.ddgi_normal_bias, pc_ray.ddgi_view_bias)) * pc_ray.ddgi_indirect_scale;
    
    

    vec3 direct_lighting = imageLoad(radiance_image, ivec2(pixel_index)).xyz;
    //    direct_lighting = normal;

    vec3 result = indirect_lighting * get_albedo(materials.m[gbuffer.d[g_buffer_index].material_idx], gbuffer.d[g_buffer_index].uv);
    if (pc_ray.ddgi_show_direct > 0){
        result += direct_lighting;
    }
    imageStore(radiance_image, pixel_index, vec4(result, 1));
}