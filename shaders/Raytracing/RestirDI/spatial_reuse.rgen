#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require



#include "di_commons.h"
#include "../common.glsl"
#include  "../bsdf.glsl"
#include "../util.glsl"



layout(location = 0) rayPayloadEXT HitPayload hitPayload;
layout(location = 1) rayPayloadEXT AnyHitPayload any_hit_payload;
#include "restir_di.glsl"

#include "../trace_common.glsl"

layout(push_constant) uniform _PushConstantRay { RestirDIPC pc_ray; };


void main()
{
    if (pc_ray.do_spatial_reuse== 0)
    {
        spatial_reservoirs.r[pixel_idx] = pass_reservoir.r[pixel_idx];
        return;
    }
    const float max_r = 10;
    const float depth_threshold = 0.01;
    const float angle_threshold = 25 * PI / 180;
    const float num_neighbor_samples = pc_ray.spatial_sample_count;
    load_gbuffer();

    const RestirReservoir curr_reservoir = pass_reservoir.r[pixel_idx];
    RestirReservoir r = init_restir_reservoir();
    //if (curr_reservoir.W != 0) 
    {
        combine_reservoir(r, curr_reservoir);
        uint num_samples = curr_reservoir.m;
        for (int i = 0; i < num_neighbor_samples; i++) {
            // Choose a neighbor pixel
            const float randa = rand1(seed) * 2 * PI;
            const float randr = sqrt(rand1(seed)) * max_r;
            ivec2 rand_offset =
            ivec2(floor(cos(randa) * randr), floor(sin(randa) * randr));
            const ivec2 coords =
            clamp(ivec2(gl_LaunchIDEXT.xy) + rand_offset, ivec2(0),
            ivec2(gl_LaunchSizeEXT.xy) - 1);
            const uint neighbor_idx = coords.y * gl_LaunchSizeEXT.x + coords.x;
            const RestirReservoir r_n = pass_reservoir.r[neighbor_idx];
            combine_reservoir(r, r_n);
            num_samples += r_n.m;


            // printf_restir_reservoir(r_n);
            // debugPrintfEXT("num_samples: %d\n", num_samples);
        }
        r.m = num_samples;
        const float phat = calc_p_hat(r);
        if (phat == 0) {
            r.W = 0;
        } else {
            r.W = r.w_sum / (r.m * phat);
        }

        if (pc_ray.do_spatial_reuse > 0)
        {
            //  printf_restir_reservoir(r);
        }
    }
    //r = curr_reservoir;

    //    debugPrintfEXT("r and cur r w_sum: %f %f\n", r.w_sum, curr_reservoir.w_sum);
    spatial_reservoirs.r[pixel_idx] = r;
}
