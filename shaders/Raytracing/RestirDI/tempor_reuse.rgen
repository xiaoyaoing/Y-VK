#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require



#include "di_commons.h"
#include "../common.glsl"
#include  "../bsdf.glsl"
#include "../util.glsl"



layout(location = 0) rayPayloadEXT HitPayload hitPayload;
layout(location = 1) rayPayloadEXT AnyHitPayload any_hit_payload;
#include "restir_di.glsl"
#include "../trace_common.glsl"

layout(push_constant) uniform _PushConstantRay { RestirDIPC pc_ray; };
layout(binding = 4, set = 2) buffer _Buffer { RestirReservoir r[]; } temporal_reservoirs1;

void main()
{
    // return ;
    seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc_ray.frame_num);

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec3 origin = (scene_ubo.viewInverse * vec4(0, 0, 0, 1)).xyz;
    vec4 target = scene_ubo.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = scene_ubo.viewInverse*vec4(normalize(target.xyz / target.w), 0);


    RestirReservoir r_new = init_restir_reservoir();
    RestirReservoir r_prev = init_restir_reservoir();
    RestirReservoir r = init_restir_reservoir();


    { uint rayFlags = gl_RayFlagsOpaqueEXT;
        uint cullMask = 0xff;
        float tmin = 0.001;
        float tmax = 10000.0;
        traceRayEXT(tlas, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
    }


    bool found_intersect = hitPayload.material_idx != -1;
    if (found_intersect) {
        SurfaceScatterEvent  event = make_surface_scatter_event(hitPayload, -direction.xyz);
        copy_event(event, g_event);

        uint light_sample_count = 32;
        for (int i = 0;i<light_sample_count;i++)
        {
            const uvec4 light_seed = seed;
            RestirData restir_data;
            LightSample light_sample;
            uint light_idx;
            vec3 un_shadowed_light_contrib = restir_sample_light(event, rand4(seed), pc_ray.light_num, light_idx, light_sample);
            restir_data.light_idx = light_idx;
            restir_data.triangle_idx = light_sample.triangle_idx;
            restir_data.seed = light_seed;
            update_restir_reservoir(r_new, restir_data, length(un_shadowed_light_contrib));
        }

        vec3 color = vec3(0);
        if (r_new.w_sum > 0)
        {
            uvec4 r_seed = r_new.s.seed;
            color = restir_sample_light(event, rand4(r_seed), pc_ray.light_num);
            float p_hat = length(color);
            if (p_hat == 0)
            {
                r_new.W = 0;
            }
            else
            {
                r_new.W = r_new.w_sum  / (p_hat * r_new.m);
            }

            //            color *= r_new.W;
            //            //color *= r_new.W;
            //            //            color = vec3(1, 0, 0);
            //            //   debugPrintfEXT("color: %f %f %f\n", color.x, color.y, color.z);
            //            imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.f));

            combine_reservoir(r, r_new);

        }

        if (pc_ray.do_temporal_reuse>0 && pc_ray.frame_num>0)
        {
            vec4 prev_pos = scene_ubo.prev_proj * scene_ubo.prev_view * vec4(hitPayload.p, 1);
            ivec2 prev_screen_pos = ivec2((prev_pos.xy/prev_pos.w  + 1) * 0.5 * gl_LaunchSizeEXT.xy);
            if (all(greaterThanEqual(prev_screen_pos, ivec2(0))) && all(lessThan(prev_screen_pos, ivec2(gl_LaunchSizeEXT.xy))))
            {
                uint prev_pixel_index = prev_screen_pos.y * gl_LaunchSizeEXT.x + prev_screen_pos.x;
                r_prev = temporal_reservoirs.r[pixel_idx];
                //  printf_restir_reservoir(r_prev);
            }


        }


    }


    uint num_samples = r_new.m;
    if (pc_ray.do_temporal_reuse>0 && pc_ray.frame_num>0){
        num_samples += r_prev.m;
        float prev_w_sum = r.w_sum;
        combine_reservoir(r, r_prev);
        float after_w_sum = r.w_sum;
        if (after_w_sum == prev_w_sum){
            debugPrintfEXT("prev_w_sum: %f, after_w_sum: %f %f %f %f\n", prev_w_sum, after_w_sum, r_prev.w_sum, calc_p_hat(r_prev), calc_p_hat(r_new));
        }
        //debugPrintfEXT("prev_w_sum: %f, after_w_sum: %f %f\n", prev_w_sum, after_w_sum, r_prev.w_sum);
    }
    r.m = num_samples;

    if (r_new.W > 0 || r_prev.W > 0){
        if (r.s.light_idx!=-1){
            const float phat = calc_p_hat(r);
            r.W = phat == 0 ? 0 : r.w_sum / (phat) / r.m;
        }
        else {
            r.W = 0;
        }

    } else {
        r.W = 0;
    }

    if (pc_ray.do_temporal_reuse>0 && pc_ray.frame_num>0){
        // printf_restir_reservoir(r);
    }

    // printf_restir_reservoir(r);
    pixel_idx =  gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x;
    pass_reservoir.r[pixel_idx] = r;

    if (found_intersect){
        gbuffer.r[pixel_idx].normal = hitPayload.n_g;
        gbuffer.r[pixel_idx].position = hitPayload.p;
        gbuffer.r[pixel_idx].uv = hitPayload.uv;
        gbuffer.r[pixel_idx].material_idx = hitPayload.material_idx; }
    else {
        gbuffer.r[pixel_idx].material_idx = -1;
        gbuffer.r[pixel_idx].uv = vec2(1, 1);
    }
}
