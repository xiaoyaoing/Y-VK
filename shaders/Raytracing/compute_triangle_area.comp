#version 460
#extension GL_EXT_buffer_reference2 : require
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_debug_printf : enable

layout(push_constant, std140) uniform UniformBuffer {
    uint index_offset;
    uint vertex_offset;
    uint index_count;
    uint padding;
    uint64_t vertex_address;
    uint64_t index_address;
    mat4     model;
};

layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer Vertices { vec3 v[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer Indices { uint i[]; };

layout(binding = 0, set = 0) buffer Area {
    float areas[];
};

layout(local_size_x = 16, local_size_y = 1, local_size_z = 1) in;
void main() {
    uint index = gl_GlobalInvocationID.x;
    // debugPrintfEXT("index %d index_count %d index_offset %d\n", index, index_count, index_offset);

    if (index >= index_count/3) {
        return;
    }

    Indices indices = Indices(index_address);
    Vertices vertices = Vertices(vertex_address);

    uint index_offset = index_offset  + 3 * index;
    uint i0 = indices.i[index_offset + 0];
    uint i1 = indices.i[index_offset + 1];
    uint i2 = indices.i[index_offset + 2];

    i0 = i0 + vertex_offset;
    i1 = i1 + vertex_offset;
    i2 = i2 + vertex_offset;

    vec3 world_pos0 = (model * vec4(vertices.v[i0], 1.0)).xyz;
    vec3 world_pos1 = (model * vec4(vertices.v[i1], 1.0)).xyz;
    vec3 world_pos2 = (model * vec4(vertices.v[i2], 1.0)).xyz;


    float area = 0.5 * length(cross(world_pos1 - world_pos0, world_pos2 - world_pos0));
    //  debugPrintfEXT("model %f %f %f %f %f %f %f %f %f %f %f %f\n", model[0][0], model[0][1], model[0][2], model[0][3], model[1][0], model[1][1], model[1][2], model[1][3], model[2][0], model[2][1], model[2][2], model[2][3]);
    areas[index] = area;

    uint triangle_idx = index;
    vec3 p0 = world_pos0;
    vec3 p1 = world_pos1;
    vec3 p2 = world_pos2;

    vec3 cross1 = cross(p1 - p0, p2 - p0);
    debugPrintfEXT("%d p0 %f %f %f p1 %f %f %f p2 %f %f %f %f %f %f %f\n", triangle_idx, p0.x, p0.y, p0.z, p1.x, p1.y, p1.z, p2.x, p2.y, p2.z, area, cross1.x, cross1.y, cross1.z);

    // areas[index] = 1.f;

}
