#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require




#include "../common.glsl"
#include  "../bsdf.glsl"
#include "path_commons.h"
#include "../util.glsl"

layout(location = 0) rayPayloadEXT HitPayload hitPayload;
layout(location = 1) rayPayloadEXT AnyHitPayload any_hit_payload;
layout(push_constant) uniform _PushConstantRay { PCPath pc_ray; };;


#include "pt_commons.glsl"

uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc_ray.frame_num);



vec3 warp(vec3 v){
    return (v + 1.0f) / 2.f;
}

bool isBlack(vec3 v){
    return v.x == 0 && v.y == 0 && v.z == 0;
}

//Param p: the point on the light source
//Param n_s: the normal of the light source
//Param w: the direction from the point to the light source
//Return: the radiance of the light source
vec3 eval_light(const RTLight light, const vec3 p, const vec3 n_g, const vec3 w){

    if (dot(n_g, -w) > 0){
        return light.L;
    }
    return vec3(0);
}

vec3   uniform_sample_one_light(inout uvec4 seed, inout SurfaceScatterEvent event, const uint light_num){
    vec3 result = vec3(0);

    float light_choose_rand = rand1(seed);

    uint light_idx = uint(light_choose_rand * light_num);
    float light_choose_pdf = 1.0 / light_num;

    vec3 light_sample_rand = rand3(seed);

    const RTLight light = lights[light_idx];

    bool enable_sample_light = pc_ray.enable_sample_light > 0;
    bool enable_sample_bsdf = pc_ray.enable_sample_bsdf > 0;


    LightSample light_sample = sample_li(light, event, light_sample_rand);

    debugPrintfEXT("light_sample_n %f %f %f\n", light_sample.n.x, light_sample.n.y, light_sample.n.z);
    return visualize_normal(light_sample.n);
    //return light_sample.indensity;
    if (enable_sample_light)
    {
        if (!isBlack(light_sample.indensity) && light_sample.pdf != 0){

            any_hit_payload.hit = 1;

            traceRayEXT(tlas,
            gl_RayFlagsTerminateOnFirstHitEXT |
            gl_RayFlagsSkipClosestHitShaderEXT,
            0xFF, 1, 0, 1, event.p, EPS, light_sample.wi, light_sample.dist - EPS, 1);
            bool  visible = any_hit_payload.hit == 0;
            visible = true;
            if (visible){
                uint material_idx = event.material_idx;
                event.wo = to_local(event.frame, light_sample.wi);
                float bsdf_pdf = pdf_bsdf(materials.m[material_idx], event);
                float light_mis_weight =enable_sample_bsdf? power_heuristic(light_sample.pdf, bsdf_pdf):1;
                vec3 bsdf =eval_bsdf(materials.m[material_idx], event);
                return light_sample.indensity / light_sample.pdf;
                return bsdf * light_sample.indensity / light_sample.pdf;
                result += light_sample.indensity  * bsdf * light_mis_weight / light_sample.pdf;
                // return visualize_normal(light_sample.wi);
                //return vec3(dot(event.frame.n, light_sample.wi));
            }
        }
    }

    return result;
    //    return result;
    if (enable_sample_bsdf)
    {
        BsdfSampleRecord record = sample_bsdf(materials.m[event.material_idx], event, rand2(seed));
        vec3 f = record.f;
        float bsdf_pdf = record.pdf;

        if (f != vec3(0) && bsdf_pdf != 0){

            //return f/bsdf_pdf;

            vec3 world_wi = to_world(event.frame, event.wo);
            //trace ray 
            hitPayload.prim_idx = -1;
            traceRayEXT(tlas,
            gl_RayFlagsOpaqueEXT,
            0xFF, 0, 0, 0, event.p, EPS, world_wi, 10000, 0);

            bool same_light = hitPayload.prim_idx == light.prim_idx;

            //return visualize_normal(world_wi);

            // debugPrintfEXT("prim_idx %d %d\n", hitPayload.prim_idx, light.prim_idx);
            if (same_light){

                uint material_idx = event.material_idx;

                float light_pdf = 1.f/get_primitive_area(light.prim_idx) *  length(hitPayload.p-event.p) * length(hitPayload.p-event.p) / abs(dot(hitPayload.n_g, world_wi));

                float bsdf_mis_weight = enable_sample_light?power_heuristic(bsdf_pdf, light_pdf):1;

                result += f * eval_light(light, hitPayload.p, hitPayload.n_g, world_wi) * bsdf_mis_weight / bsdf_pdf;

                //                return eval_light(light, hitPayload.p, hitPayload.n_g, world_wi);
            }

        }
    }

    return result;
}




vec3 Le(vec3 dir_to_light){
    uint light_idx = prim_infos.p[hitPayload.prim_idx].light_index;
    //debugPrintfEXT("light_idx %d\n", light_idx);
    if (light_idx == -1 || light_idx>pc_ray.light_num-1){
        return vec3(0);
    }
    return eval_light(lights[light_idx], hitPayload.p, hitPayload.n_g, dir_to_light);
}

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec3 origin = (scene_ubo.viewInverse * vec4(0, 0, 0, 1)).xyz;
    vec4 target = scene_ubo.projInverse * vec4(d.x, d.y, 1, 1);
    // origin =  vec4(0, 0, 0, 1);
    //   target = vec4(d.x, d.y, 100, 1);
    vec4 direction = scene_ubo.viewInverse*vec4(normalize(target.xyz / target.w), 0);

    // debugPrintfEXT("origin %f %f %f direction %f %f %f\n", origin.x, origin.y, origin.z, direction.x, direction.y, direction.z);

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;

    vec3 throughput = vec3(1.0);
    int depth;
    vec3 color = vec3(0.f);

    bool specular_bounce = true;


    for (depth = 0; depth<pc_ray.max_depth; depth++){
        uint prev_material_idx = hitPayload.material_idx;

        hitPayload.material_idx = -1;

        //        return;
        traceRayEXT(tlas, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

        bool found_intersect = hitPayload.material_idx != -1;

        //        found_intersect  = any_hit_payload.hit == 1;
        if (!found_intersect) {
            break;
        }

        //   return;


        SurfaceScatterEvent event = make_surface_scatter_event(hitPayload, -direction.xyz);

        //        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(pseudocolor(hitPayload.material_idx), 1));
        //        return;

        //        break;

        uint light_idx = prim_infos.p[hitPayload.prim_idx].light_index;
        RTPrimitive prim = prim_infos.p[hitPayload.prim_idx];
        //  if (light_idx!=-1)
        //  debugPrintfEXT("light_idx %d primidx %d %f %d %d\n", light_idx, hitPayload.prim_idx, prim.area, prim.index_count, prim.index_offset);
        //        light_idx = uint(light_idx == -1);
        //        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(pseudocolor(light_idx), 1));
        //        return;
        // break;
        if (specular_bounce){
            color += throughput *  Le(direction.xyz);;
        }

        //        break;

        if (depth >= pc_ray.min_depth)
        color +=  throughput *  uniform_sample_one_light(seed, event, pc_ray.light_num);

        //        color = visualize_normal(hitPayload.n_g);

        break;


        BsdfSampleRecord record = sample_bsdf(materials.m[event.material_idx], event, rand2(seed));

        specular_bounce = false;

        if (record.f == vec3(0) || record.pdf ==0){
            break;
        }
        vec3 wi_world = to_world(event.frame, event.wo);
        throughput *= record.f / record.pdf;

        //        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(throughput, 1));
        //        return;

        direction = vec4(wi_world, 0);
        origin = event.p + direction.xyz * EPS;
        //origin = offset_ray_origin(event.p,  , direction);
    }

    if (isnan(color.x) || isnan(color.y) || isnan(color.z)){
        debugPrintfEXT("nan %f %f %f\n", color.x, color.y, color.z);
    }
    if (pc_ray.frame_num > 0) {

        float w = 1. / float(pc_ray.frame_num + 1);
        vec3 old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy),
        vec4(mix(old_color, color, w), 1.f));

    } else {

        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.f));
    }
}
