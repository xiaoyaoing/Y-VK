#version 460
#extension GL_EXT_ray_tracing : require

#include "../common.glsl"
#include "path_commons.h"
#include "../util.glsl"




layout(location = 0) rayPayloadEXT HitPayload hitPayload;
layout(push_constant) _PushCOnstantRay {PcPath pc_ray}; 

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = cam.viewInverse * vec4(0,0,0,1);
    vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
    vec4 direction = cam.viewInverse*vec4(normalize(target.xyz / target.w), 0) ;

    uint rayFlags = gl_RayFlagsOpaqueEXT; 
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;

    vec3 throughput = vec3(1.0);
    int depth;
    vec3 color = vec3(1.f);
    
    for( depth = 0 ;  ; depth++){
        if(depth>= pc_ray.max_depth) {
            break;
        } 
        traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
        const  bool found_intersect = hitPayload.material_idx != -1;
        if(!found_intersect) {
            break;
        }
        
        color += uniform_sample_one_light()
        
    }
    

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 0.0));
}
