#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require




#include "../common.glsl"
#include  "../bsdf.glsl"
#include "path_commons.h"

layout(binding = 0, set = 2, rgba32f) uniform image2D image;
layout(location = 0) rayPayloadEXT HitPayload hitPayload;
layout(location = 1) rayPayloadEXT AnyHitPayload any_hit_payload;
layout(push_constant) uniform _PushConstantRay { PCPath pc_ray; };


#include "../trace_common.glsl"

uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc_ray.frame_num);



vec3 warp(vec3 v){
    return (v + 1.0f) / 2.f;
}





vec3 Le(vec3 dir_to_light){
    uint light_idx = prim_infos.p[hitPayload.prim_idx].light_index;
    //debugPrintfEXT("light_idx %d\n", light_idx);
    if (light_idx == -1 || light_idx>pc_ray.light_num-1){
        return vec3(0);
    }
    return eval_light(lights[light_idx], hitPayload.p, hitPayload.n_g, dir_to_light);
}



vec3 eval_env(vec3 dir){
    dir = normalize(dir);
    if (scene_desc.envmap_idx == -1){
        return vec3(0);
    }
    mat4  m = transpose(lights[scene_desc.envmap_idx].world_matrix);
    vec2 dir_uv = envdir_to_uv(m, dir);
    return texture(scene_textures[lights[scene_desc.envmap_idx].light_texture_id], dir_uv).xyz;
}

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    vec3 origin = (scene_ubo.viewInverse * vec4(0, 0, 0, 1)).xyz;
    vec4 target = scene_ubo.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = scene_ubo.viewInverse*vec4(normalize(target.xyz / target.w), 0);
    
    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;

    vec3 throughput = vec3(1.0);
    int depth;
    vec3 color = vec3(0.f);

    bool specular_bounce = true;



    for (depth = 0; depth<pc_ray.max_depth; depth++){

        uint prev_material_idx = hitPayload.material_idx;

        hitPayload.material_idx = -1;

        traceRayEXT(tlas, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
        

        bool found_intersect = hitPayload.material_idx != -1;
        if (!found_intersect) {
            if (specular_bounce){
                color += throughput * eval_env(direction.xyz);
            }
            break;
        }

        SurfaceScatterEvent event = make_surface_scatter_event(hitPayload, -direction.xyz);


        uint light_idx = prim_infos.p[hitPayload.prim_idx].light_index;
        RTPrimitive prim = prim_infos.p[hitPayload.prim_idx];

        if (specular_bounce){
            color += throughput *  Le(direction.xyz);;
        }

        
        
        if (depth >= pc_ray.min_depth)
        {
            vec3 light_sample = uniform_sample_one_light(seed, event, pc_ray.light_num, pc_ray.enable_sample_light>0, pc_ray.enable_sample_bsdf>0);
            color += throughput * light_sample;
            if(isnan(light_sample.x) || isnan(light_sample.y) || isnan(light_sample.z)){
                debugPrintfEXT("nan light_sample %f %f %f\n", light_sample.x, light_sample.y, light_sample.z);
            }
        }



        BsdfSampleRecord record = sample_bsdf(materials.m[event.material_idx], event, seed);

        specular_bounce = (record.sample_flags & RT_BSDF_LOBE_SPECULAR)!=0;

        //     bool refract = (record.sample_flags & RT_BSDF_LOBE_REFRACTION)!=0;

        //        color = refract ? vec3(1, 0, 0) : vec3(0, 1, 0);
        //        break;
        // 

        if (record.f == vec3(0) || record.pdf ==0){
            break;
        }
        vec3 wi_world = to_world(event.frame, event.wi);
        throughput *= record.f / record.pdf;

        if (pc_ray.visual_throughput>0 && depth == pc_ray.max_depth-1){
            color = throughput;
            break;
        }
        if (pc_ray.visual_normal>0){
            color = event.frame.n;
            break;
        }

        if (pc_ray.visual_albedo>0){
            color = get_albedo(materials.m[event.material_idx], event.uv);
            break;
        }

        if (pc_ray.visual_material_type>0){
            uint bsdf_type = materials.m[event.material_idx].bsdf_type;
            color = pseudocolor(bsdf_type);
            break;
        }


        if (isnan(throughput.x) || isnan(throughput.y) || isnan(throughput.z)){
            debugPrintfEXT("nan throughput %f %f %f\n", throughput.x, throughput.y, throughput.z);
        }


        direction = vec4(wi_world, 0);
        origin = event.p + direction.xyz * EPS;
        //origin = offset_ray_origin(event.p,  , direction);
    }

    
   // color = vec3(1,0,0);
//    if(depth  >= pc_ray.max_depth-1 ){
//         color = throughput;
//    }
  //  color = throughput * eval_env(direction.xyz);
   // color = direction.xyz;


    if (isnan(color.x) || isnan(color.y) || isnan(color.z)){
        debugPrintfEXT("nan color %f %f %f\n", color.x, color.y, color.z);
    }
    if (pc_ray.frame_num > 0 && pc_ray.enable_accumulation>0) {

        float w = 1. / float(pc_ray.frame_num + 1);
        vec3 old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy),
        vec4(mix(old_color, color, w), 1.f));

    } else {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.f));
    }
}
