#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#include "commons.h"
#include "common.glsl"
#include  "bsdf.glsl"

layout(binding = 0, set = 2, rgba32f) uniform image2D direct_lighting_image;
layout(buffer_reference, std430, buffer_reference_align = 4) readonly buffer GBuffer_{ GBuffer r[]; };
GBuffer_ gbuffer = GBuffer_(scene_desc.gbuffer_addr);

layout(location = 0) rayPayloadEXT HitPayload hitPayload;
layout(location = 1) rayPayloadEXT AnyHitPayload any_hit_payload;
layout(push_constant) uniform _PushConstantRay { PCPath pc_ray; };

#ifdef WRITE_DEPTH
layout(binding = 1, set = 2, r32f) uniform image2D depth_image;
#endif

#include "trace_common.glsl"

uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc_ray.frame_num);


vec3 Le(vec3 dir_to_light){
    uint light_idx = prim_infos.p[hitPayload.prim_idx].light_index;
    if (light_idx == -1 || light_idx>pc_ray.light_num-1){
        return vec3(0);
    }
    return eval_light(lights[light_idx], hitPayload.p, hitPayload.n_g, dir_to_light);
}

vec3 eval_env(vec3 dir){
    dir = normalize(dir);
    if (scene_desc.envmap_idx == -1){
        return vec3(0);
    }
    mat4  m = transpose(lights[scene_desc.envmap_idx].world_matrix);
    vec2 dir_uv = envdir_to_uv(m, dir);
    return texture(scene_textures[lights[scene_desc.envmap_idx].light_texture_id], dir_uv).xyz;
}

void main()
{

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    vec3 origin = (scene_ubo.viewInverse * vec4(0, 0, 0, 1)).xyz;
    vec4 target = scene_ubo.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = scene_ubo.viewInverse*vec4(normalize(target.xyz / target.w), 0);
    uint pixel_idx = gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x;

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;
    vec3 radiance = vec3(0.f);
    bool found_intersect = false;
    //    return;
    SurfaceScatterEvent event;
    {
        hitPayload = init_hit_payload();

        traceRayEXT(tlas, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);


        bool found_intersect = found_intersection(hitPayload);
        if (!found_intersect) {
            radiance =eval_env(direction.xyz);
        }
        else {
            event = make_surface_scatter_event(hitPayload, -direction.xyz);
            radiance +=   Le(direction.xyz);;
            vec3 light_sample = uniform_sample_one_light(seed, event, pc_ray.light_num, pc_ray.enable_sample_light>0, pc_ray.enable_sample_bsdf>0);
            //            debugPrintfEXT("light_sample %f %f %f\n", light_sample.x, light_sample.y, light_sample.z);
            radiance +=  light_sample;
        }
    }
    if (isnan(radiance.x) || isnan(radiance.y) || isnan(radiance.z)){
        debugPrintfEXT("nan radiance %f %f %f\n", radiance.x, radiance.y, radiance.z);
    }
    imageStore(direct_lighting_image, ivec2(gl_LaunchIDEXT.xy), vec4(radiance, 1.0));
    if (found_intersect){
        gbuffer.r[pixel_idx].normal = hitPayload.n_g;
        gbuffer.r[pixel_idx].position = hitPayload.p;
        gbuffer.r[pixel_idx].uv = hitPayload.uv;
        gbuffer.r[pixel_idx].material_idx = hitPayload.material_idx; }
    else {
        gbuffer.r[pixel_idx].material_idx = -1;
        gbuffer.r[pixel_idx].uv = vec2(1, 1);
    }

    #ifdef  WRITE_DEPTH
    float depth;
    if (found_intersect)
    { 
        float dist = distance(hitPayload.p, origin);
        depth = dist / (scene_ubo.z_far - scene_ubo.z_near); 
    }
    else { depth = 1.0; }
    imageStore(depth_image, ivec2(gl_LaunchIDEXT.xy), vec4(depth, 0, 0, 0));
    #endif
}
