#version 450
#extension GL_EXT_debug_printf : enable
layout(push_constant) uniform PostProcess {
    vec4 params0;
} postprocess;

layout(binding = 0, set =  1) uniform sampler2D input_image;

layout(binding = 0, set=2, r32f) uniform writeonly image2D output_image;

#define POSTPROCESS_BLOCKSIZE 8

layout(local_size_x = POSTPROCESS_BLOCKSIZE, local_size_y = POSTPROCESS_BLOCKSIZE, local_size_z = 1) in;
void main() {
    ivec2 dispatch_id = ivec2(gl_GlobalInvocationID.xy);

    if (all(lessThan(dispatch_id.xy, ivec2(postprocess.params0.xy)))) {
        vec2 uv0 = (vec2(dispatch_id.xy) + 0.5) / postprocess.params0.xy;
        vec2 uv1 = uv0 + vec2(1.f / postprocess.params0.x, 0);
        vec2 uv2 = uv0 + vec2(0, 1.f / postprocess.params0.y);
        vec2 uv3 = uv0 + vec2(1.f / postprocess.params0.x, 1.f / postprocess.params0.y);

        if (postprocess.params0.z == 0.0) {


            vec4 depths = vec4(texture(input_image, uv0).r, texture(input_image, uv1).r, texture(input_image, uv2).r, texture(input_image, uv3).r);

            float depthMin = min(min(depths.x, depths.y), min(depths.z, depths.w));

            imageStore(output_image, dispatch_id, vec4(depthMin, 0, 0, 0.0));
        } else {

            //vec4 depthsRed = textureGather(input_image, uv, 0);
            //vec4 depthsGreen = textureGather(input_image, uv, 0);

            vec4 depthsGreen = vec4(texture(input_image, uv0).r, texture(input_image, uv1).r, texture(input_image, uv2).r, texture(input_image, uv3).r);
            //            float depthMax = max(max(depthsRed.x, depthsRed.y), max(depthsRed.z, depthsRed.w));
            float depthMin = min(min(depthsGreen.x, depthsGreen.y), min(depthsGreen.z, depthsGreen.w));

            imageStore(output_image, dispatch_id, vec4(depthMin, 0, 0, 1.0));
        }
    }
}
